package LinkedComparisonHashMap
import ErrorHandling
import HashMap

public interface Hashable
    protected abstract function hash() returns string

public enum PutStatus
    Inserted
    Updated
    Failed

public tuple put_result(PutStatus status)

public abstract class PutWithDuplicateFn<V>
    protected abstract function call(Hashable newKey, V existing, V nu) returns V

/* The keys used in this class must implement Hashable! */
public class LinkedComparisonHashMap<V>
    protected constant dummy       = new LHMEntry<V>(null, null, null)
    private   constant keysEntries = new HashMap<string, LHMEntry<V>>()
    protected var      tail        = dummy
    private   var      size        = 0


    construct()
        dummy.next = dummy
        dummy.prev = dummy


    private function addEntry(LHMEntry<V> e)
        if tail == dummy
            dummy.next = e
            tail = e
            tail.prev  = dummy
            tail.next  = dummy
        else
            tail.next = e
            e.prev = tail
            e.next = dummy
            tail = e

        dummy.prev = tail

        size++


    function putOrElse(Hashable key, V value, PutWithDuplicateFn<V> or_else) returns put_result
        if this.has(key)
            let entry = keysEntries.get(key.hash())
            entry.value = or_else.call(key, entry.value, value)
            destroy or_else

            return put_result(PutStatus.Updated)
        else
            destroy or_else
            return putNew(key, value)

    function putOrForgetOldAndDestroyNewKey(Hashable key, V value) returns put_result
        return putOrElse(key, value) (new_key, existing, nu) ->
            destroy new_key
            return nu

    /** Saves the given value under the given key. */
    private function putNew(Hashable key, V value) returns put_result
        let entry = new LHMEntry<V>(this, key, value)
        addEntry(entry)
        keysEntries.put(key.hash(), entry)

        return put_result(PutStatus.Inserted)


    function get(Hashable key) returns V
        return keysEntries.get(key.hash()).value


    function has(Hashable key) returns bool
        return keysEntries.has(key.hash())


    /** Get the number of mappings in this LinkedComparisonHashMap. */
    function size() returns int
        return size


    /**
    Removes the value saved under the given key.

    @returns true on success, and false if there was no such key.
    */
    function remove(Hashable key) returns bool
        var success = false

        if this.has(key)
            success = true
            remove(keysEntries.get(key.hash()))

        return success


    protected function remove(LHMEntry<V> e)
        keysEntries.remove(e.key.hash())
        destroy e
        size--


    /** Clears the LinkedComparisonHashMap of all entries. */
    function flush()
        keysEntries.flush()
        removeWhen((LHMEntry<V> kv) -> true)


    /** Gets an iterator for this LinkedComparisonHashMap. */
    function iterator() returns LHMIterator<V>
        return new LHMIterator(this, dummy)


    function removeWhen(LinkedComparisonHashMapPredicate<V> predicate)
        let iter = iterator()
        while iter.hasNext()
            let kv = iter.next()

            if predicate.isTrueFor(kv)
                iter.remove()
        iter.close()
        destroy predicate


    function forEach(LinkedComparisonHashMapCallback<Hashable, V> callback)
        let iter = iterator()
        while iter.hasNext()
            let kv = iter.next()

            callback.run(kv)
        iter.close()

        destroy callback


    ondestroy
        flush()
        destroy keysEntries
        destroy dummy


public class LHMEntry<V>

    private constant LinkedComparisonHashMap<V> parent
    constant Hashable key
    V value

    protected thistype prev = null
    protected thistype next = null

    construct(LinkedComparisonHashMap<V> parent, Hashable key, V value)
        this.parent = parent
        this.key    = key
        this.value  = value

    ondestroy
        if this.parent.tail == this
            this.parent.tail = this.parent.tail.prev

        this.prev.next = this.next
        this.next.prev = this.prev


public class LHMIterator<V>
    private LHMEntry<V>      dummy
    private LHMEntry<V>      current
    private LinkedComparisonHashMap<V> parentMap

    construct(LinkedComparisonHashMap<V> parentMap, LHMEntry<V> dummy)
        this.dummy     = dummy
        this.current   = dummy
        this.parentMap = parentMap


    /** Remove the current element from the LinkedComparisonHashMap. */
    function remove()
        if current == dummy
            error("Tried to delete dummy from LinkedComparisonHashMap iterator.")
        else
            parentMap.remove(current)


    function hasNext() returns bool
        return not current.next == dummy


    function next() returns LHMEntry<V>
        current = current.next
        return current


    function close()
        destroy this


public interface LinkedComparisonHashMapPredicate<V>
    function isTrueFor(LHMEntry<V> kv) returns bool


public interface LinkedComparisonHashMapCallback<K, V>
    function run(LHMEntry<V> kv)


class TestClass implements Hashable
    int val

    construct(int val)
        this.val = val


    override function hash() returns string
        return "TestClass" + this.val.toString()


    function toString() returns string
        return "[Test Class] " + val.toString()


@test function checkPutFetch()
    let k = new TestClass(1)
    let map = new LinkedComparisonHashMap<int>()
    map.putOrForgetOldAndDestroyNewKey(k, 6)

    let six = map.get(k)
    six.assertEquals(6)

    destroy map


@test function checkCanIterate()
    let map = new LinkedComparisonHashMap<TestClass>()
    let tc1 = new TestClass(1)
    let tc2 = new TestClass(2)
    let tc3 = new TestClass(3)
    let tc4 = new TestClass(4)

    map.putOrForgetOldAndDestroyNewKey(tc1, tc2)
    map.putOrForgetOldAndDestroyNewKey(tc3, tc4)

    var sum = 0

    let iter = map.iterator()
    while iter.hasNext()
        let entry = iter.next()
        sum += (entry.key castTo TestClass).val
        sum += entry.value.val
    iter.close()

    sum.assertEquals(10)
    destroy map


@test function canHaveMultipleMaps()
    let map  = new LinkedComparisonHashMap<int>()
    let map2 = new LinkedComparisonHashMap<int>()

    let k1 = new TestClass(1)
    let k2 = new TestClass(3)

    map. putOrForgetOldAndDestroyNewKey(k1, 2)
    map2.putOrForgetOldAndDestroyNewKey(k2, 4)

    map. get(k1).assertEquals(2)
    map2.get(k2).assertEquals(4)

    destroy map
    destroy map2


@test function canNestedIterate()
    let map = new LinkedComparisonHashMap<int>()

    let k1 = new TestClass(1)
    let k2 = new TestClass(2)
    let k3 = new TestClass(3)
    let k4 = new TestClass(4)
    let k5 = new TestClass(5)

    map
        ..putOrForgetOldAndDestroyNewKey(k1, 2)
        ..putOrForgetOldAndDestroyNewKey(k2, 3)
        ..putOrForgetOldAndDestroyNewKey(k3, 4)
        ..putOrForgetOldAndDestroyNewKey(k4, 5)
        ..putOrForgetOldAndDestroyNewKey(k5, 6)

    var outerSum = 0
    for kv in map
        outerSum += kv.value

        var innerSum = 0
        for innerKv in map
            innerSum += innerKv.value

        innerSum.assertEquals(20)
    outerSum.assertEquals(20)


@test function canIterateSameMapTwice()
    let map = new LinkedComparisonHashMap<int>()

    let k1 = new TestClass(1)
    let k2 = new TestClass(3)

    map.putOrForgetOldAndDestroyNewKey(k1, 2)
    map.putOrForgetOldAndDestroyNewKey(k2, 4)

    var sum = 0

    let iter = map.iterator()
    while iter.hasNext()
        let entry = iter.next()

        sum += (entry.key castTo TestClass).val
        sum += entry.value
    iter.close()

    let iter2 = map.iterator()
    while iter2.hasNext()
        let entry = iter2.next()

        sum += (entry.key castTo TestClass).val
        sum += entry.value
    iter2.close()

    sum.assertEquals(20)


@test function canHandleDestroyedElements()
    let map = new LinkedComparisonHashMap<TestClass>()

    let tc1 = new TestClass(1)
    let tc2 = new TestClass(2)
    let tc3 = new TestClass(3)
    let tc4 = new TestClass(4)

    map.putOrForgetOldAndDestroyNewKey(tc1, tc2)
    map.putOrForgetOldAndDestroyNewKey(tc3, tc4)

    var sum = 0
    for x in map
        sum += (x.key castTo TestClass).val
        sum += x.value.val

    sum.assertEquals(10)

    tc1.val = -1

    map.removeWhen((LHMEntry<TestClass> kv) -> (kv.key castTo TestClass).val == -1 or kv.value.val == -1)

    sum = 0
    for x in map
        sum += (x.key castTo TestClass).val
        sum += x.value.val

    sum.assertEquals(7)

    destroy map

@test function canBecomeEmptyThenIterateAgainLater()
    let map = new LinkedComparisonHashMap<int>()

    let k1 = new TestClass(1)
    let k2 = new TestClass(2)
    let k3 = new TestClass(3)
    let k4 = new TestClass(4)

    map
        ..putOrForgetOldAndDestroyNewKey(k1, 1)
        ..putOrForgetOldAndDestroyNewKey(k2, 2)
        ..putOrForgetOldAndDestroyNewKey(k3, 3)
        ..putOrForgetOldAndDestroyNewKey(k4, 4)

    map.removeWhen() kv ->
        return (kv.key castTo TestClass).val < 3

    map.size().assertEquals(2)

    map.remove(k4)

    map.size().assertEquals(1)

    let iter = map.iterator()
    for kv from iter
        kv.value.assertEquals(3)
        iter.remove()
    iter.close()

    map.size().assertEquals(0)

    map..putOrForgetOldAndDestroyNewKey(k1, 2)..putOrForgetOldAndDestroyNewKey(k2, 3)..putOrForgetOldAndDestroyNewKey(k3, 4)

    var vals = 0
    let braap = map.iterator()
    for kv from braap
        vals += kv.value
    braap.close()

    vals.assertEquals(9)


@test function iterateEmptyMap()
    let m = new LinkedComparisonHashMap<int>()

    for _ in m
        testFail("Nothing should be iterated here.")

    // Test when there are two LHM's, each with its own dummy.
    let n = new LinkedComparisonHashMap<int>()

    for _ in n
        testFail("Nothing should be iterated here.")


@test function comparablePropertyUseful()
    let k1 = new TestClass(1)
    let k2 = new TestClass(1)

    let m = new LinkedComparisonHashMap<int>()

    let res1 = m.putOrForgetOldAndDestroyNewKey(k1, 1)
    let res2 = m.putOrForgetOldAndDestroyNewKey(k2, 2)

    assertTrue(res1.status == PutStatus.Inserted)
    assertTrue(res2.status == PutStatus.Updated)

    let entry1 = m.get(k1)
    assertTrue(entry1 == 2)
