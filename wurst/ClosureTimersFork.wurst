package ClosureTimersFork
import NoWurst
import TimerUtils
import Real
import Wurstunit

/** Execute an action after a certain time.
    The callback object is automatically destroyed.

    Example use:
    | doAfter(10.0) ->
    |     print("10 seconds later")
*/
public function doAfter(real timeToWait, CallbackSingle cb) returns CallbackSingle
    cb.start(timeToWait)
    return cb

/** Execute an action with a 0-second timer delay.
    The callback object is destroyed afterwards.
*/
public function nullTimer(CallbackSingle cb) returns CallbackSingle
    doAfter(0, cb)
    return cb

/** Execute an action periodically.
    The callback has to be destroyed manually.

    Example use:
    | doPeriodically(0.5) cb ->
    |     if i > 10
            destroy cb
*/


public function doPeriodically(real time, CallbackPeriodic cb) returns CallbackPeriodic
    cb.start(time)
    return cb

/** execute an action periodically, with a limited amount of calls
    The callback object is destroyed after the action has been executed callAmount times.

    Example use:
    | doPeriodicallyCounted(0.5, 100) cb ->
    |     doSomething()

*/
public function doPeriodicallyCounted(real time, int callAmount, CallbackCounted cb) returns CallbackCounted
    cb.start(time, callAmount)
    return cb
/** execute an action periodically, with a limited duration
    The callback object is destroyed afterwards.

    Example use:
    | doPeriodicallyCounted(0.5, 10.) ->
    |     doSomething()

*/
public function doPeriodicallyTimed(real interval, real timerDuration, CallbackCounted cb) returns CallbackCounted
    doPeriodicallyCounted(interval, (timerDuration / interval + 0.5).toInt(), cb)
    return cb

//Timer Stuff
public abstract class CallbackSingle
    private timer t
    abstract function call()

    function start(real time)
        t = getTimer()
            ..setData(this castTo int)
            ..start(time, () -> staticCallback())


    private static function staticCallback()
        timer t = GetExpiredTimer()
        thistype cb = t.getData() castTo thistype
        cb.call()
        destroy cb

    ondestroy
        t.release()


public tuple dialog_update_fn_res(string name, bool display)

public abstract class PeriodicDialogUpdateFn
    protected abstract function call(CallbackPeriodic cb) returns dialog_update_fn_res

public abstract class CallbackPeriodic
    private timer t
    private PeriodicDialogUpdateFn update_fn = null
    private timerdialog dialg = null

    protected abstract function call(thistype cb)

    function start(real time)
        this.t = getTimer()
        t.setData(this castTo int)
        t.startPeriodic(time, function staticCallback)

    function setupDialogCallback(PeriodicDialogUpdateFn update_fn)
        this.update_fn = update_fn
        this.dialg = CreateTimerDialog(this.t)
        let update_result = update_fn.call(this)
        TimerDialogDisplay(this.dialg, update_result.display)
        TimerDialogSetTitle(this.dialg, update_result.name)

    private static function staticCallback()
        let cb = (GetExpiredTimer().getData() castTo thistype)
        cb.call(cb)
        if cb.update_fn != null
            let update_result = cb.update_fn.call(cb)
            TimerDialogDisplay(cb.dialg, update_result.display)
            TimerDialogSetTitle(cb.dialg, update_result.name)

    ondestroy
        t.release()
        if this.update_fn != null
            TimerDialogDisplay(this.dialg, false)
            DestroyTimerDialog(this.dialg)
            destroy this.update_fn


public abstract class CountedDialogUpdateFn
    protected abstract function call(CallbackCounted cb) returns dialog_update_fn_res


public abstract class CallbackCounted
    private var count = 0
    private timer t
    private CountedDialogUpdateFn update_fn = null
    private timerdialog dialg = null

    protected abstract function call(thistype cb)

    function start(real time, int callAmount)
        this.t = getTimer()
        t.setData(this castTo int)
        count = callAmount
        t.startPeriodic(time, function staticCallback)

    function setupDialogCallback(CountedDialogUpdateFn update_fn)
        this.update_fn = update_fn
        this.dialg = CreateTimerDialog(this.t)
        let update_result = update_fn.call(this)
        TimerDialogDisplay(this.dialg, update_result.display)
        TimerDialogSetTitle(this.dialg, update_result.name)

    function isLast() returns boolean
        return count == 1

    function getCount() returns int
        return count

    function stop()
        count = 1

    private static function staticCallback()
        let cb = (GetExpiredTimer().getData() castTo thistype)
        cb.callAndCount()
        if cb.update_fn != null
            let update_result = cb.update_fn.call(cb)
            TimerDialogDisplay(cb.dialg, update_result.display)
            TimerDialogSetTitle(cb.dialg, update_result.name)

    private function callAndCount()
        call(this)
        count--
        if count <= 0
            destroy this

    ondestroy
        t.release()
        if this.update_fn != null
            TimerDialogDisplay(this.dialg, false)
            DestroyTimerDialog(this.dialg)
            destroy this.update_fn


var x = 200
@Test function testDoAfter()

    doAfter(0.1) ->
        x += 50

    doAfter(0.2) ->
        x *= 2

    doAfter(0.3) ->
        x = x div 2
        x.assertEquals(250)
