package RealHeapGuard

import ClosureTimers
import LinkedList

///
/// Implements a max-priority-queue over a binary heap singleton that must be
/// locked for use.
///
/// The heap is nominally a single `real array`.
///

real array _heap
int array _obj_heap
int max_index = -1

public tuple maybe_node_children(int count, int a, int b)
public tuple maybe_node_parent(bool have, int idx)

public abstract class NodeChildrenAnyPred
    protected abstract function call(int idx) returns bool

public abstract class NodeParentAndThen
    protected abstract function call(int idx) returns bool

public function maybe_node_children.any(NodeChildrenAnyPred pred) returns bool
    if this.count > 0
        if pred.call(this.a)
            destroy pred
            return true
        if this.count > 1
            if pred.call(this.b)
                destroy pred
                return true
    destroy pred
    return false

public function maybe_node_children.max_idx() returns int
    if this.count > 0
        if this.count > 1
            if _heap[this.a] > _heap[this.b]
                return this.a
            return this.b
        return this.a
    return -1

public function maybe_node_parent.and_then_heap_less_than_other_idx(int other_idx) returns bool
    if this.have
        return (_heap[this.idx] < _heap[other_idx])
    return false

function int._heap_children() returns maybe_node_children
    // 0 -> 1, 2
    // 1 -> 3, 4
    // 2 -> 5, 6
    // 3 -> 7, 8
    // 4 -> 9, 10
    // 5 -> 11, 12
    let nominal_1 = 2 * this + 1
    let nominal_2 = 2 * this + 2
    var count = 0
    if nominal_1 <= max_index
        count++

        if nominal_2 <= max_index
            count++

    return maybe_node_children(count, nominal_1, nominal_2)

function int._heap_parent() returns maybe_node_parent
    // 12 -> 5
    // 11 -> 5
    // 10 -> 4
    //  9 -> 4
    //  8 -> 3
    //  7 -> 3
    //  6 -> 2
    if this == 0
        return maybe_node_parent(false, 0)
    if this % 2 == 1
        return maybe_node_parent(true, this div 2)
    return maybe_node_parent(true, (this div 2) - 1)


public tuple maybe_real(bool have, real val)
public tuple maybe_real_and_obj_id(bool have, real val, int idx)

function _push_heap(real val, int obj_idx)
    max_index++
    _heap[max_index] = val
    _obj_heap[max_index] = obj_idx

    // Re-sort.
    var this_idx = max_index
    while (this_idx._heap_parent().and_then_heap_less_than_other_idx(this_idx))
        let new_idx = this_idx._heap_parent().idx
        _heap_swap(this_idx, new_idx)
        this_idx = new_idx

function _heap_swap(int idx_a, int idx_b)
    let temp = _heap[idx_a]
    let obj_temp = _obj_heap[idx_a]
    _heap[idx_a] = _heap[idx_b]
    _heap[idx_b] = temp
    _obj_heap[idx_a] = _obj_heap[idx_b]
    _obj_heap[idx_b] = obj_temp

function _peek_weight() returns maybe_real
    if max_index == -1
        return maybe_real(false, 0)
    return maybe_real(true, _heap[0])

function _pop_heap() returns maybe_real_and_obj_id
    if max_index == -1
        return maybe_real_and_obj_id(false, 0., 0)
    let ret = _heap[0]
    let obj_ret = _obj_heap[0]
    _heap[0] = _heap[max_index]
    _obj_heap[0] = _obj_heap[max_index]
    max_index--

    // Re-sort.
    var this_idx = 0
    while (this_idx._heap_children().any(child_idx -> _heap[child_idx] > _heap[this_idx]))
        let new_idx = this_idx._heap_children().max_idx()
        _heap_swap(new_idx, this_idx)
        this_idx = new_idx

    return maybe_real_and_obj_id(true, ret, obj_ret)

function _release_heap()
    max_index = -1

let _heap_queue = new LinkedList<int>()
var nonce = 0

public abstract class WithRealHeapGuard<T>
    protected abstract function call(RealHeapGuard<T> heap)

public class RealHeapGuard<T>
    private int _nonce
    private WithRealHeapGuard<T> cb

    construct(WithRealHeapGuard<T> callback)
        nonce++
        this.cb = callback
        _nonce = nonce
        _release_heap()
        _heap_queue.push(_nonce)
        doPeriodically(ANIMATION_PERIOD) cb ->
            if _heap_queue.getFirst() == _nonce
                destroy cb
                callback.call(this)

    function peek_weight() returns maybe_real
        return _peek_weight()

    function pop() returns T
        let res = _pop_heap()
        if not res.have
            return null
        return res.idx castTo T

    function is_empty() returns bool
        return not _peek_weight().have

    function push(real weight, T obj)
        _push_heap(weight, obj castTo int)

    function print_raw()
        var res = "["
        for i = 0 to max_index
            res += _heap[i].toString()
            res += " "
        res += "]"
        print(res)

    ondestroy
        destroy this.cb
        _heap_queue.dequeue()

@test function halfRealAsInts()
    assertTrue(3.5.toInt() == 3)
    assertTrue(3.6.toInt() == 3)
    assertTrue(3.4.toInt() == 3)
    assertTrue(3.499999.toInt() == 3)

@test function heapParentWorks()
    assertTrue(12 ._heap_parent().idx == 5)
    assertTrue(11 ._heap_parent().idx == 5)
    assertTrue(10 ._heap_parent().idx == 4)
    assertTrue( 9 ._heap_parent().idx == 4)
    assertTrue( 8 ._heap_parent().idx == 3)
    assertTrue( 7 ._heap_parent().idx == 3)
    assertTrue( 6 ._heap_parent().idx == 2)

    assertTrue( 0 ._heap_parent().have == false)

@test function heapChildrenWorks()
    assertTrue(0 ._heap_children().a == 1)
    assertTrue(1 ._heap_children().b == 4)
    assertTrue(2 ._heap_children().a == 5)
    assertTrue(3 ._heap_children().b == 8)
    assertTrue(4 ._heap_children().a == 9)
    assertTrue(5 ._heap_children().b == 12)

// class TestClass
//     string name
//     construct(string name)
//         this.name = name

// init
//     new RealHeapGuard<TestClass>() guard ->
//         guard.push(3., new TestClass("bob3"))
//         guard.push(9., new TestClass("jan9"))
//         guard.push(4., new TestClass("michael4"))
//         guard.push(12., new TestClass("TOBY12"))
//         guard.push(5., new TestClass("bob5"))
//         guard.push(16., new TestClass("SCOTTIE16"))
//         guard.push(5., new TestClass("bobb5"))
//         guard.push(5., new TestClass("bobbb5"))
//         guard.push(99., new TestClass("BLAKE 99"))
//         guard.push(1., new TestClass("worm1"))
//         guard.push(7., new TestClass("sam7"))

//         guard.print_raw()

//         while true
//             let res = guard.pop()
//             if not res == null
//                 print(res.name)
//             else
//                 break
