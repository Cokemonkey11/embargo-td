package Astar

import Abilities
import ClosureTimers
import LinkedComparisonHashMap
import LinkedList
import TerrainUtils


public tuple astar_res(bool succ)

public abstract class AstarPredicate
    protected abstract function call(vec2 test) returns bool

public abstract class AstarFuture
    protected abstract function call(astar_res res)

public tuple option_int(bool have, int val)
function option_int.get_or(int def) returns int
    if this.have
        return this.val

    return def

class Vec2Wrap implements Hashable
    vec2 t

    construct(vec2 t)
        this.t = t

    override function hash() returns string
        return "Vec2Wrap" + this.t.toString()

function vec2.manhattan_to(vec2 rhs) returns real
    return (this.x - rhs.x).abs() + (this.y - rhs.y).abs()

var duplicates_count = 0
public class Astar
    vec2 start
    vec2 target
    AstarPredicate pred
    option_int maybe_limit

    LinkedList<Vec2Wrap> frontier

    LinkedComparisonHashMap<bool> passed

    construct(vec2 start, vec2 target, AstarPredicate pred, option_int maybe_limit)
        this.start = start
        this.target = target
        this.pred = pred
        this.maybe_limit = maybe_limit

        this.frontier = new LinkedList<Vec2Wrap>()
        this.passed = new LinkedComparisonHashMap<bool>()

    ondestroy
        this.frontier.forEach() v ->
            destroy v
        destroy this.frontier

        destroy this.pred

        let i = this.passed.iterator()
        while i.hasNext()
            let v = i.next()
            destroy v
        i.close()
        destroy this.passed

    private function _propagate(AstarFuture fut)
        print("f" + this.frontier.size().toString())
        let iter = this.frontier.iterator()
        var cnt = 0
        while iter.hasNext() and cnt < 10
            let itm = iter.next()
            cnt++

            //let dist = itm.t.distanceToSq(this.target)
            let dist = itm.t.manhattan_to(this.target)

            if dist < 2. * (16. + 16.)
                fut.call(astar_res(false))
                return

            if this.pred.call(itm.t)
                let top   = new Vec2Wrap( itm.t + vec2(  0.,  16.) )
                let left  = new Vec2Wrap( itm.t + vec2(-16.,   0.) )
                let botm  = new Vec2Wrap( itm.t + vec2(  0., -16.) )
                let right = new Vec2Wrap( itm.t + vec2( 16.,   0.) )
                if not this.passed.has(top)
                    this.frontier.addtoStart(top)
                    this.passed.putOrForgetOldAndDestroyNewKey(top, true)
                else
                    destroy top
                if not this.passed.has(left)
                    this.frontier.addtoStart(left)
                    this.passed.putOrForgetOldAndDestroyNewKey(left, true)
                else
                    destroy left
                if not this.passed.has(botm)
                    this.frontier.addtoStart(botm)
                    this.passed.putOrForgetOldAndDestroyNewKey(botm, true)
                else
                    destroy botm
                if not this.passed.has(right)
                    this.frontier.addtoStart(right)
                    this.passed.putOrForgetOldAndDestroyNewKey(right, true)
                else
                    destroy right

            iter.remove()

        if not this.frontier.isEmpty()
            // nullTimer() ->
            doAfter(ANIMATION_PERIOD) ->
                _propagate(fut)
        else
            fut.call(astar_res(false))
            destroy fut
        iter.close()

    function evaluate_by_null_timers(AstarFuture fut)
        this.frontier.add(new Vec2Wrap(this.start))

        _propagate(fut)

init
    FogEnable(false)
    FogMaskEnable(false)

    new Astar(vec2(0., -520.), vec2(0., -1024.), (test) -> begin
        addEffect(Abilities.witchDoctorMissile, test)
        print(test.toString())
        let suc = test.isTerrainWalkable()
        return suc
    end, option_int(false, 0))
        ..evaluate_by_null_timers() res ->
            print("test1 " + res.succ.toString())

    new Astar(vec2(4380., -3480.), vec2(4190., -2945.), (test) -> begin
        addEffect(Abilities.witchDoctorMissile, test)
        print(test.toString())
        let suc = test.isTerrainWalkable()
        return suc
    end, option_int(false, 0))
        ..evaluate_by_null_timers() res ->
            print("test2 " + res.succ.toString())
